// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = "postgresql://postgres:root1@10.142.0.2:5434/bartender?schema=public"
  // url      = "postgresql://postgres:root1@35.237.243.32:5434/bartender?schema=public"
}

model TagType {
  id          Int     @id @default(autoincrement())
  order       Int     @default(0)
  name        String
  description String?
  isShown     Boolean @default(false)
  tags        Tag[]
}

model Tag {
  id          Int        @id @default(autoincrement())
  order       Int        @default(0)
  name        String     @unique
  description String?
  cocktails   Cocktail[]
  tagTypeId   Int?
  tagType     TagType?   @relation(fields: [tagTypeId], references: [id])
  isShown     Boolean    @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model IngredientType {
  id          Int          @id @default(autoincrement())
  name        String       @unique
  description String?
  ingredients Ingredient[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("ingredient_types")
}

model GlassType {
  id          Int        @id @default(autoincrement())
  name        String     @unique
  description String?
  cocktails   Cocktail[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model BuildType {
  id          Int        @id @default(autoincrement())
  name        String     @unique
  description String?
  cocktails   Cocktail[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Ingredient {
  id               Int                         @id @default(autoincrement())
  name             String
  description      String?
  ingredientTypeId Int
  ingredientType   IngredientType              @relation(fields: [ingredientTypeId], references: [id])
  measurments      IngredientsOnMeasurements[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("ingredients")
}

model Measurement {
  id            Int     @id @default(autoincrement())
  value         String
  isMilliliters Boolean @default(false)

  ingredients IngredientsOnMeasurements[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("measurements")
}

model IngredientsOnMeasurements {
  id           Int         @id @default(autoincrement())
  measurmentId Int
  measurment   Measurement @relation(fields: [measurmentId], references: [id])
  ingredientId Int
  ingredient   Ingredient  @relation(fields: [ingredientId], references: [id])
  cocktailId   Int
  cocktail     Cocktail    @relation(fields: [cocktailId], references: [id])
}

model CocktailInstruction {
  id         Int      @id @default(autoincrement())
  order      Int
  text       String
  cocktailId Int
  cocktail   Cocktail @relation(fields: [cocktailId], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Cocktail {
  id            Int                         @id @default(autoincrement())
  name          String                      @unique
  imageUrl      String?
  keys          String[]
  description   String
  glassTypeId   Int
  glassType     GlassType                   @relation(fields: [glassTypeId], references: [id])
  buildTypeId   Int
  buildType     BuildType                   @relation(fields: [buildTypeId], references: [id])
  tags          Tag[]
  ingredients   IngredientsOnMeasurements[]
  instructions  CocktailInstruction[]
  rating        Float?
  countOfRating Int                         @default(0)
  isPublished   Boolean                     @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("cocktails")
}

// model Default {
//   id Int @id @default(autoincrement())
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

// @@map("table_name")
// }
